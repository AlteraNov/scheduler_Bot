import os
import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from datetime import datetime, timedelta
import pytz
from database import init_db, add_task, delete_task, delete_all_tasks, get_due_tasks
from datetime import datetime
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
API_TOKEN = '8020507153:AAEKpXpo9lFxWyze5wfYJaTx-L2sllq99Rc'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
# States
class Form(StatesGroup):
    waiting_for_timezone = State()
    waiting_for_task = State()
    waiting_for_time = State()
    waiting_for_task_id = State()
    waiting_for_due_time = State()
    waiting_for_time_del =  State()

async def init_db():
    async with aiosqlite.connect('tasks.db') as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL UNIQUE,
                timezone TEXT
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                task TEXT NOT NULL,
                due_time DATETIME NOT NULL,
                completed BOOLEAN DEFAULT FALSE,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        await db.commit()
async def send_due_task_notifications():
    async with aiosqlite.connect('tasks.db') as db:  # Open the connection once
        while True:
            current_time = datetime.now()
            async with db.execute('SELECT user_id, id, task FROM tasks WHERE due_time <= ? AND completed = FALSE', (current_time,)) as cursor:
                tasks = await cursor.fetchall()

            for user_id, task_id, task in tasks:
                await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –í–∞—à–∞ –∑–∞–¥–∞—á–∞: '{task}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            await asyncio.sleep(30)  # Check every minute
@dp.message_handler(commands=['start',"help"])
async def start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á.\n \n"
                        "/add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. \n \n"
                        "/delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. \n \n"
                        "/deleteall –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á.\n \n"
                        "/list, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á. \n \n"
                        "/complete, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. \n \n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow').")
    await Form.waiting_for_timezone.set()

@dp.message_handler(state=Form.waiting_for_timezone)
async def process_timezone(message: types.Message, state: FSMContext):
    timezone = message.text
    try:
        pytz.timezone(timezone)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        async with aiosqlite.connect('tasks.db') as db:
            await db.execute('INSERT OR IGNORE INTO users (username, timezone) VALUES (?, ?)', (message.from_user.username, timezone))
            await db.commit()
        await message.reply(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timezone}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É.")
        await Form.waiting_for_task.set()
    except pytz.UnknownTimeZoneError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message_handler(state=Form.waiting_for_task)
async def process_task(message: types.Message, state: FSMContext):
    task = message.text
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD HH:MM'.")
    await state.update_data(task=task)
    await Form.waiting_for_due_time.set()

@dp.message_handler(state=Form.waiting_for_due_time)
async def process_due_time(message: types.Message, state: FSMContext):
    due_time_str = message.text
    data = await state.get_data()
    task = data.get('task') 
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
        due_time = datetime.strptime(due_time_str, '%Y-%m-%d %H:%M')
        user_id = message.from_user.id  
        async with aiosqlite.connect('tasks.db') as db:
            await db.execute('INSERT INTO tasks (user_id, task, due_time) VALUES (?, ?, ?)', (user_id, task, due_time))
            await db.commit()
        
        await message.reply(f"–ó–∞–¥–∞—á–∞ '{task}' –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {due_time}.")
        await state.finish()
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message_handler(commands=['add'])
async def process_add_command(message: types.Message):
    await Form.waiting_for_task.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")


@dp.message_handler(commands=['list'])
async def list_tasks(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect('tasks.db') as db:
        async with db.execute('SELECT id, task, due_time, completed FROM tasks WHERE user_id = ?', (user_id,)) as cursor:
            tasks = await cursor.fetchall() 
    if tasks:
        response = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
        for task_id, task, due_time, completed in tasks:
            status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ" if completed else "‚ùå –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            response += f"{task_id}. - {task} (–°—Ä–æ–∫: {due_time}) {status}\n"
        await message.reply(response)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")

@dp.message_handler(commands=['complete'])
async def complete_task(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å.")
    await Form.waiting_for_task_id.set()

@dp.message_handler(state=Form.waiting_for_task_id)
async def process_complete_task(message: types.Message, state: FSMContext):
    task_id = message.text
    user_id = message.from_user.id
    try:
        task_id = int(task_id)
        async with aiosqlite.connect('tasks.db') as db:
            result = await db.execute('UPDATE tasks SET completed = TRUE WHERE id = ? AND user_id = ?', (task_id, user_id))
            await db.commit()
            if result.rowcount == 0:
                await message.reply("–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                await message.reply(f"–ó–∞–¥–∞—á–∞ #{task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await state.finish()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏.")

@dp.message_handler(state=Form.waiting_for_time)
async def process_time(message: types.Message, state: FSMContext):
    time_str = message.text
    user_id = message.from_user.id
    data = await state.get_data()
    task = data.get('task')
    try:
        due_time = datetime.strptime(time_str, '%Y-%m-%d %H:%M')
        await add_task(user_id, task, due_time.strftime('%Y-%m-%d %H:%M:%S'))
        await message.reply("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await state.finish()
@dp.message_handler(commands=['delete'])
async def process_delete_command(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await Form.waiting_for_time_del.set()
@dp.message_handler(state=Form.waiting_for_time_del)
async def process_delete_task(message: types.Message, state: FSMContext):
    try:
        task_id = int(message.text)
        await delete_task(task_id)
        await message.reply("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
    except Exception as e:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    await state.finish()

@dp.message_handler(commands=['deleteall'])
async def process_delete_all_command(message: types.Message):
    user_id = message.from_user.id
    await delete_all_tasks(user_id)
    await message.reply("–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.")

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    loop.create_task(send_due_task_notifications())
    executor.start_polling(dp, skip_updates=True)